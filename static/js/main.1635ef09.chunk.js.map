{"version":3,"sources":["game2/Game2.jsx","assets/img/arrow_down.svg","assets/img/story1a.jpg","assets/img/wrong.svg","assets/img/story2a.jpg","assets/img/story3a.jpg","assets/img/story4a.jpg","assets/img/story5a.jpg","assets/img/story6a.jpg","assets/img/story1b.jpg","assets/img/story2b.jpg","assets/img/story3b.jpg","assets/img/story4b.jpg","assets/img/story5b.jpg","assets/img/story6b.jpg","assets/audio/1a.mp3","assets/audio/2a.mp3","assets/audio/3a.mp3","assets/audio/4a.mp3","assets/audio/5a.mp3","assets/audio/6a.mp3","assets/audio/1b.mp3","assets/audio/2b.mp3","assets/audio/3b.mp3","assets/audio/4b.mp3","assets/audio/5b.mp3","assets/audio/6b.mp3","UI/Indicator.jsx","game1/Game1.jsx","game2/wordList/wordList.jsx","assets/img/SVG/subtract.svg","assets/img/SVG/arrow.svg","game5/Part2Game5.jsx","game5/Game5.jsx","App.js","index.js"],"names":["Indicator","active","wrong","useState","animationStart","setAnimationStart","useEffect","setTimeout","position","left","top","transform","zIndex","height","width","backgroundColor","borderRadius","display","alignItems","justifyContent","padding","pointerEvents","transition","opacity","ReactDOM","createPortal","className","style","viewBox","fill","xmlns","clipPath","d","id","document","querySelector","imageObj","img","Image2a","nextImg","Image2b","text","nextText","answerIndex","audio","Audio1a","nextAudio","Audio1b","Image3a","Image3b","Audio2a","Audio2b","Image1b","Image1a","Audio3a","Audio3b","Image4a","Image4b","Audio4a","Audio4b","Image5a","Image5b","Audio5a","Audio5b","Image6a","Image6b","Audio6a","Audio6b","Game1","optionsRef","useRef","imageRef","imageWidth","setImageWidth","audioRef","indicator","setIndicator","level","setLevel","activeImage","setActiveImage","imagesRef","map","element","i","createRef","setWidthContainer","Math","ceil","current","children","length","handleClick","initEvent","target","getAttribute","prev","setAttribute","elementIndex","getBoundingClientRect","cursor","parentElement","src","appendChild","window","innerWidth","play","textElement","innerHTML","duration","fontSize","console","log","handleImageOption","index","targetElement","childrenList","Array","from","remove","optionImage","querySelectorAll","ref","controls","type","item","onClick","alt","disableClick","e","class","wordList","ballActiveList","ballActiveStatus","j","sentenceList","words","word","allowed","shuffleArray","array","floor","random","optionList","correctID","diagonal","App","setLoad","navButtonRef","firstElementChild","zoom","render"],"mappings":"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","file":"static/js/main.1635ef09.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../css/game2.css\";\r\nimport DragElement from \"../UI/DragElement\";\r\nimport Ball from \"./../UI/Ball\";\r\nimport Container from \"./Container\";\r\nimport Group from \"./Group\";\r\nimport { useState, useEffect, useReducer, createRef, useRef } from \"react\";\r\nimport wordList from \"./wordList/wordList\";\r\nimport StatusBar from \"../UI/StatusBar\";\r\n\r\nlet ballActiveList = [];\r\nlet ballActiveStatus = [];\r\n\r\nfor (let i = 0; i < wordList.length; i++) {\r\n  ballActiveList[i] = [];\r\n  ballActiveStatus[i] = [];\r\n  for (let j = 0; j < wordList[i].length; j++) {\r\n    ballActiveList[i][j] = false;\r\n    ballActiveStatus[i][j] = true;\r\n  }\r\n}\r\n\r\nconst Game2 = () => {\r\n  const [lineLevel, setLineLevel] = useState(0);\r\n  const [ballLength, setballLength] = useState(0);\r\n  const [ballActive, setBallActive] = useState(ballActiveList);\r\n  const [ballStatus, setBallStatus] = useState(ballActiveStatus);\r\n  const [buttonShow, setButtonShow] = useState(false);\r\n  const [verbCircle, setVerbCircle] = useState({\r\n    opacity: 0,\r\n    left: \"50%\",\r\n    top: 0,\r\n    height: 0,\r\n    width: 0,\r\n    borderWidth: 25,\r\n    transition: 200,\r\n  });\r\n  const [activeContainer, setActiveContainer] = useState(0);\r\n  const containerRef = [\r\n    useRef(null),\r\n    useRef(null),\r\n    useRef(null),\r\n    useRef(null),\r\n    useRef(null),\r\n  ];\r\n  const dropZoneRef = useRef(null);\r\n  const ballRefs = React.useRef([]);\r\n\r\n  ballRefs.current = wordList.map((container, i) => {\r\n    return container.map((_, j) => ballRefs[j] ?? createRef());\r\n  });\r\n\r\n  useEffect(() => {\r\n    setVerbCircle((prev) => {\r\n      return {\r\n        ...prev,\r\n        top: dropZoneRef.current.getBoundingClientRect().bottom,\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  //SetBallPosition\r\n  const setBallPosition = () => {\r\n    let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n    for (let i = 0; i < ballList.length; i++) {\r\n      ballList[i].style.transition = \"200ms\";\r\n\r\n      ballList[i].style.left =\r\n        dropZoneRef.current.getBoundingClientRect().left +\r\n        dropZoneRef.current.getBoundingClientRect().width / 2 +\r\n        80 * (i - ballList.length / 2) +\r\n        \"px\";\r\n      ballList[i].style.top =\r\n        dropZoneRef.current.getBoundingClientRect().top +\r\n        14 -\r\n        (8 + 6 * Math.floor(Math.abs(i - (ballList.length - 1) / 2)) - 1) *\r\n          Math.abs(i - (ballList.length - 1) / 2) +\r\n        \"px\";\r\n\r\n      setTimeout(() => {\r\n        ballList[i].style.transition = \"0ms\";\r\n      }, 200);\r\n    }\r\n\r\n    setballLength(ballList.length);\r\n\r\n    console.log(ballList.length);\r\n  };\r\n\r\n  //SetVerbCirclePosition\r\n  const setVerbCirclePosition = (contIndex) => {\r\n    let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n    let validIndex = ballList.length - 1;\r\n\r\n    if (\r\n      ballList.length !== 0 &&\r\n      Array.from(ballList[validIndex].classList).findIndex(\r\n        (el) => el === \"lastChild\"\r\n      ) !== -1\r\n    ) {\r\n      validIndex--;\r\n    }\r\n\r\n    if (contIndex < 1) {\r\n      setVerbCircle((prev) => {\r\n        return {\r\n          ...prev,\r\n          opacity: 0,\r\n        };\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setVerbCircle((prev) => {\r\n          return {\r\n            ...prev,\r\n            left: \"50%\",\r\n            top: dropZoneRef.current.getBoundingClientRect().bottom,\r\n            height: 0,\r\n            width: 0,\r\n            borderWidth: 25,\r\n          };\r\n        });\r\n      }, 200);\r\n    } else {\r\n      setTimeout(() => {\r\n        setVerbCircle({\r\n          left: document.querySelector(\".verb1\").getBoundingClientRect().left,\r\n          top:\r\n            dropZoneRef.current.getBoundingClientRect().bottom -\r\n            ((document.querySelector(\".verb2\").getBoundingClientRect().right -\r\n              document.querySelector(\".verb1\").getBoundingClientRect().left -\r\n              50) *\r\n              0.25 +\r\n              (20 + 6 * validIndex) * 2 +\r\n              5 +\r\n              validIndex * 11),\r\n          width:\r\n            document.querySelector(\".verb2\").getBoundingClientRect().right -\r\n            document.querySelector(\".verb1\").getBoundingClientRect().left,\r\n          borderWidth: 20 + 5 * validIndex,\r\n          transition: 200,\r\n          opacity: 1,\r\n        });\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  //\r\n\r\n  const activeMovement = (\r\n    e,\r\n    ball,\r\n    contIndex,\r\n    ballIndex,\r\n    initX,\r\n    initY,\r\n    followingBall,\r\n    preventMove = false\r\n  ) => {\r\n    if (preventMove) return;\r\n    preventMove = true;\r\n\r\n    let el = e ? e.target : ball;\r\n\r\n    ball.style.zIndex = \"1000000\";\r\n\r\n    setActiveContainer(+ball.getAttribute(\"containerIndex\"));\r\n    const moveElement = (moveEvent) => {\r\n      el.style.left = moveEvent.clientX - 40 + \"px\";\r\n      el.style.top = moveEvent.clientY - 40 + \"px\";\r\n\r\n      if (contIndex === 1) {\r\n        followingBall.style.zIndex = \"1000000\";\r\n        if (\r\n          Array.from(el.classList).findIndex((word) => word === \"verb1\") >= 0\r\n        ) {\r\n          document.querySelector(\".verb2\").style.left =\r\n            moveEvent.clientX + 40 + \"px\";\r\n          document.querySelector(\".verb2\").style.top =\r\n            moveEvent.clientY - 40 + \"px\";\r\n        } else {\r\n          document.querySelector(\".verb1\").style.left =\r\n            moveEvent.clientX - 120 + \"px\";\r\n          document.querySelector(\".verb1\").style.top =\r\n            moveEvent.clientY - 40 + \"px\";\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", moveElement);\r\n\r\n    const endMoveElement = (endEvent) => {\r\n      document.removeEventListener(\"mousemove\", moveElement);\r\n      document.removeEventListener(\"mouseup\", endMoveElement);\r\n\r\n      if (\r\n        endEvent.clientX >\r\n          containerRef[contIndex].current.getBoundingClientRect().left &&\r\n        endEvent.clientX <\r\n          containerRef[contIndex].current.getBoundingClientRect().right &&\r\n        endEvent.clientY >\r\n          containerRef[contIndex].current.getBoundingClientRect().top &&\r\n        endEvent.clientY <\r\n          containerRef[contIndex].current.getBoundingClientRect().bottom\r\n      ) {\r\n        ball.style.transition = \"200ms\";\r\n        ball.style.left = initX + \"px\";\r\n        ball.style.top = initY + \"px\";\r\n\r\n        let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n        let statusBallList = [...ballStatus];\r\n\r\n        if (\r\n          (contIndex === 1 || contIndex === 0) &&\r\n          ballList[1]?.getAttribute(\"ballindex\")\r\n        ) {\r\n          for (let i = 0; i < ballStatus.length; i++) {\r\n            if (i === 1 || i === 0) {\r\n              let switchBallIndex = +ballList[1]?.getAttribute(\"ballindex\");\r\n\r\n              switch (switchBallIndex) {\r\n                case 0:\r\n                case 1:\r\n                case 6:\r\n                case 7:\r\n                case 12:\r\n                case 13:\r\n                  statusBallList[1][0] = true;\r\n                  statusBallList[1][1] = true;\r\n                  statusBallList[1][6] = true;\r\n                  statusBallList[1][7] = true;\r\n                  statusBallList[1][12] = true;\r\n                  statusBallList[1][13] = true;\r\n                  break;\r\n                case 2:\r\n                case 3:\r\n                case 8:\r\n                case 9:\r\n                case 14:\r\n                case 15:\r\n                  statusBallList[1][2] = true;\r\n                  statusBallList[1][3] = true;\r\n                  statusBallList[1][8] = true;\r\n                  statusBallList[1][9] = true;\r\n                  statusBallList[1][14] = true;\r\n                  statusBallList[1][15] = true;\r\n                  break;\r\n                case 4:\r\n                case 5:\r\n                case 10:\r\n                case 11:\r\n                case 16:\r\n                case 17:\r\n                  statusBallList[1][4] = true;\r\n                  statusBallList[1][5] = true;\r\n                  statusBallList[1][10] = true;\r\n                  statusBallList[1][11] = true;\r\n                  statusBallList[1][16] = true;\r\n                  statusBallList[1][17] = true;\r\n                  break;\r\n                default:\r\n                  statusBallList = [...statusBallList];\r\n              }\r\n            } else {\r\n              for (let j = 0; j < ballStatus[i].length; j++) {\r\n                if (!ballActive[i][j]) statusBallList[i][j] = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < ballList.length; i++) {\r\n          if (\r\n            ballList[i] === undefined ||\r\n            +ballList[i].getAttribute(\"containerindex\") < contIndex\r\n          )\r\n            continue;\r\n\r\n          let ballIndex = +ballList[i].getAttribute(\"ballIndex\");\r\n          let containerIndex = +ballList[i].getAttribute(\"containerindex\");\r\n\r\n          ballList[i].style.transition = \"200ms\";\r\n\r\n          if (\r\n            +ballList[i].getAttribute(\"containerindex\") === contIndex ||\r\n            activeContainer === 1\r\n          ) {\r\n            ballList[i].style.left =\r\n              ballRefs.current[containerIndex][\r\n                ballIndex\r\n              ].current?.getBoundingClientRect().left + \"px\";\r\n            ballList[i].style.top =\r\n              ballRefs.current[containerIndex][\r\n                ballIndex\r\n              ].current?.getBoundingClientRect().top + \"px\";\r\n          } else {\r\n            if (i === ballList.length - 1 && contIndex !== 0) continue;\r\n\r\n            ballList[i].style.transform = `scale(0.55)`;\r\n\r\n            ballList[i].style.left =\r\n              ballRefs.current[containerIndex][\r\n                ballIndex\r\n              ].current.getBoundingClientRect().left -\r\n              18.4 +\r\n              \"px\";\r\n            ballList[i].style.top =\r\n              ballRefs.current[containerIndex][\r\n                ballIndex\r\n              ].current.getBoundingClientRect().top -\r\n              18.4 +\r\n              \"px\";\r\n          }\r\n\r\n          setTimeout(() => {\r\n            setBallActive((prev) => {\r\n              let list = [...prev];\r\n              list[containerIndex][ballIndex] = false;\r\n\r\n              return list;\r\n            });\r\n            ballList[i].remove();\r\n\r\n            setBallPosition();\r\n          }, 200);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          preventMove = false;\r\n          setTimeout(() => {\r\n            let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n            // if (ballList.length === ballLength) {\r\n            console.log(\"in\");\r\n            setVerbCirclePosition(ballList.length - 2);\r\n            // }\r\n\r\n            setButtonShow(ballLength === 1 || ballLength > 3);\r\n          }, 200);\r\n        }, 200);\r\n        setBallStatus(statusBallList);\r\n      } else {\r\n        let copyList = [...ballStatus];\r\n        if (contIndex === 1) {\r\n          switch (ballIndex) {\r\n            case 0:\r\n            case 1:\r\n            case 6:\r\n            case 7:\r\n            case 12:\r\n            case 13:\r\n              copyList[1][0] = false;\r\n              copyList[1][1] = false;\r\n              copyList[1][6] = false;\r\n              copyList[1][7] = false;\r\n              copyList[1][12] = false;\r\n              copyList[1][13] = false;\r\n              break;\r\n            case 2:\r\n            case 3:\r\n            case 8:\r\n            case 9:\r\n            case 14:\r\n            case 15:\r\n              copyList[1][2] = false;\r\n              copyList[1][3] = false;\r\n              copyList[1][8] = false;\r\n              copyList[1][9] = false;\r\n              copyList[1][14] = false;\r\n              copyList[1][15] = false;\r\n              break;\r\n            case 4:\r\n            case 5:\r\n            case 10:\r\n            case 11:\r\n            case 16:\r\n            case 17:\r\n              copyList[1][4] = false;\r\n              copyList[1][5] = false;\r\n              copyList[1][10] = false;\r\n              copyList[1][11] = false;\r\n              copyList[1][16] = false;\r\n              copyList[1][17] = false;\r\n              break;\r\n            default:\r\n              copyList = [...copyList];\r\n          }\r\n\r\n          switch (ballIndex) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n            case 6:\r\n            case 7:\r\n            case 12:\r\n            case 13:\r\n              copyList[2][0] = false;\r\n              copyList[2][1] = false;\r\n              copyList[2][2] = false;\r\n              copyList[2][3] = false;\r\n              break;\r\n            case 4:\r\n            case 5:\r\n              copyList[2][0] = false;\r\n              copyList[2][2] = false;\r\n              copyList[2][3] = false;\r\n              break;\r\n            case 8:\r\n            case 9:\r\n            case 14:\r\n            case 15:\r\n              copyList[2][1] = false;\r\n              copyList[2][2] = false;\r\n              copyList[2][3] = false;\r\n              break;\r\n            case 10:\r\n            case 11:\r\n              copyList[2][1] = false;\r\n              copyList[2][3] = false;\r\n              break;\r\n            case 16:\r\n            case 17:\r\n              copyList[2][0] = false;\r\n              copyList[2][1] = false;\r\n              copyList[2][2] = false;\r\n              break;\r\n\r\n            default:\r\n              copyList = [...copyList];\r\n          }\r\n\r\n          switch (ballIndex) {\r\n            case 0:\r\n            case 1:\r\n            case 4:\r\n            case 5:\r\n              copyList[3][0] = false;\r\n              copyList[3][2] = false;\r\n              copyList[3][3] = false;\r\n              break;\r\n            case 2:\r\n            case 3:\r\n              copyList[3][0] = false;\r\n              copyList[3][3] = false;\r\n              break;\r\n            case 6:\r\n            case 7:\r\n            case 16:\r\n            case 17:\r\n              copyList[3][0] = false;\r\n              copyList[3][1] = false;\r\n              copyList[3][2] = false;\r\n              copyList[3][3] = false;\r\n              break;\r\n            case 8:\r\n            case 9:\r\n              copyList[3][1] = false;\r\n              copyList[3][2] = false;\r\n              break;\r\n            case 10:\r\n            case 11:\r\n              copyList[3][2] = false;\r\n              copyList[3][3] = false;\r\n              break;\r\n            case 12:\r\n            case 13:\r\n              copyList[3][0] = false;\r\n              copyList[3][1] = false;\r\n              copyList[3][3] = false;\r\n              break;\r\n            case 14:\r\n            case 15:\r\n              copyList[3][0] = false;\r\n              copyList[3][1] = false;\r\n              copyList[3][2] = false;\r\n              break;\r\n            default:\r\n              copyList = [...copyList];\r\n          }\r\n\r\n          switch (ballIndex) {\r\n            case 0:\r\n            case 1:\r\n              copyList[4][0] = false;\r\n              copyList[4][1] = false;\r\n              copyList[4][2] = false;\r\n              copyList[4][3] = false;\r\n              break;\r\n            case 2:\r\n            case 3:\r\n            case 8:\r\n            case 9:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n            case 15:\r\n              copyList[4][1] = false;\r\n              break;\r\n            case 6:\r\n            case 7:\r\n              copyList[4][1] = false;\r\n              copyList[4][2] = false;\r\n              break;\r\n            default:\r\n              copyList = [...copyList];\r\n          }\r\n        }\r\n\r\n        setBallStatus(copyList);\r\n\r\n        setBallPosition();\r\n\r\n        if (contIndex > 0) {\r\n          setTimeout(() => {\r\n            setVerbCirclePosition(contIndex);\r\n          }, 200);\r\n        }\r\n\r\n        let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n        let validIndex = ballList.length - 1;\r\n\r\n        setButtonShow(\r\n          +ballList[ballList.length - 2]?.getAttribute(\"containerindex\") !== 1\r\n        );\r\n\r\n        if (\r\n          Array.from(ballList[validIndex].classList).findIndex(\r\n            (el) => el === \"lastChild\"\r\n          ) !== -1\r\n        ) {\r\n          validIndex--;\r\n        }\r\n\r\n        let nextContainerIndex =\r\n          +ballList[validIndex].getAttribute(\"containerindex\") + 1;\r\n\r\n        let stop = false;\r\n\r\n        for (let i = nextContainerIndex; i < 5; i++) {\r\n          if (stop) break;\r\n          for (let j = 0; j < ballActiveStatus[i].length; j++) {\r\n            if (ballActiveStatus[i][j]) {\r\n              stop = true;\r\n              nextContainerIndex = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!stop) {\r\n          setActiveContainer(5);\r\n          setButtonShow(true);\r\n        } else {\r\n          setActiveContainer(nextContainerIndex);\r\n        }\r\n\r\n        if (followingBall) followingBall.style.zIndex = \"1000\";\r\n        ball.style.zIndex = \"1000\";\r\n        preventMove = false;\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", endMoveElement);\r\n  };\r\n\r\n  //\r\n\r\n  const handleCopyElement = (initEvent, contIndex, ballIndex) => {\r\n    if (!ballStatus[contIndex][ballIndex]) return;\r\n    let followingBall;\r\n\r\n    let ball = initEvent.target.cloneNode(true);\r\n\r\n    ball.style.opacity = \"1\";\r\n    ball.style.position = \"absolute\";\r\n    ball.style.cursor = \"pointer\";\r\n    ball.style.zIndex = \"1000000\";\r\n    ball.style.left =\r\n      initEvent.clientX -\r\n      initEvent.target.getBoundingClientRect().width / 2 +\r\n      \"px\";\r\n    ball.style.top =\r\n      initEvent.clientY -\r\n      initEvent.target.getBoundingClientRect().width / 2 +\r\n      \"px\";\r\n\r\n    ball.setAttribute(\"containerIndex\", contIndex);\r\n    ball.setAttribute(\"ballIndex\", ballIndex);\r\n    ball.classList.add(\"ballClone\");\r\n\r\n    if (contIndex === 1) {\r\n      let followingIndex;\r\n      if (ballIndex % 2 === 0) {\r\n        followingIndex = ballIndex + 1;\r\n      } else {\r\n        followingIndex = ballIndex - 1;\r\n      }\r\n\r\n      followingBall = document\r\n        .querySelector(`.element1${followingIndex}`)\r\n        .children[0].cloneNode(true);\r\n      followingBall.style.opacity = \"1\";\r\n      followingBall.style.position = \"absolute\";\r\n      followingBall.style.cursor = \"pointer\";\r\n      followingBall.style.zIndex = \"1000000\";\r\n\r\n      if (ballIndex % 2 === 0) {\r\n        followingBall.style.left = initEvent.clientX + 40 + \"px\";\r\n        followingBall.style.top = initEvent.clientY - 40 + \"px\";\r\n        followingBall.classList.add(\"ballClone\", \"lastChild\", \"verb2\");\r\n        ball.classList.add(\"verb1\");\r\n      } else {\r\n        followingBall.style.left = initEvent.clientX - 120 + \"px\";\r\n        followingBall.style.top = initEvent.clientY - 40 + \"px\";\r\n        followingBall.classList.add(\"ballClone\", \"verb1\");\r\n        ball.classList.add(\"lastChild\", \"verb2\");\r\n      }\r\n\r\n      followingBall.setAttribute(\"containerIndex\", contIndex);\r\n      followingBall.setAttribute(\"ballIndex\", followingIndex);\r\n\r\n      document.getElementById(\"clone-div\").appendChild(followingBall);\r\n\r\n      setBallActive((prev) => {\r\n        let list = [...prev];\r\n        list[contIndex][followingIndex] = true;\r\n\r\n        return list;\r\n      });\r\n    }\r\n    setBallActive((prev) => {\r\n      let list = [...prev];\r\n      list[contIndex][ballIndex] = true;\r\n\r\n      return list;\r\n    });\r\n\r\n    const initX = initEvent.target.getBoundingClientRect().left;\r\n    const initY = initEvent.target.getBoundingClientRect().top;\r\n\r\n    if (activeContainer === 1 && ballIndex % 2 === 0) {\r\n      document.getElementById(\"clone-div\").insertBefore(ball, followingBall);\r\n    } else if (activeContainer > 1) {\r\n      document\r\n        .getElementById(\"clone-div\")\r\n        .insertBefore(ball, document.querySelector(\".lastChild\"));\r\n    } else {\r\n      document.getElementById(\"clone-div\").appendChild(ball);\r\n    }\r\n\r\n    let preventMove = false;\r\n\r\n    ball.addEventListener(\"mousedown\", (e) => {\r\n      activeMovement(\r\n        e,\r\n        ball,\r\n        contIndex,\r\n        ballIndex,\r\n        initX,\r\n        initY,\r\n        followingBall,\r\n        preventMove\r\n      );\r\n    });\r\n\r\n    if (followingBall) {\r\n      followingBall.addEventListener(\"mousedown\", (e) => {\r\n        activeMovement(\r\n          e,\r\n          ball,\r\n          contIndex,\r\n          ballIndex,\r\n          initX,\r\n          initY,\r\n          followingBall,\r\n          preventMove\r\n        );\r\n      });\r\n    }\r\n\r\n    activeMovement(\r\n      false,\r\n      ball,\r\n      contIndex,\r\n      ballIndex,\r\n      initX,\r\n      initY,\r\n      followingBall,\r\n      preventMove\r\n    );\r\n  };\r\n\r\n  const svgRef = useRef(null);\r\n\r\n  const handleSubmit = () => {\r\n    svgRef.current.style.opacity = 0;\r\n\r\n    setTimeout(() => {\r\n      svgRef.current.style.transition = \"500ms\";\r\n\r\n      if (lineLevel < 2) {\r\n        svgRef.current.style.opacity = 1;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        svgRef.current.style.transition = \"0ms\";\r\n      }, 500);\r\n    }, 1000);\r\n\r\n    const copySvg = svgRef.current.cloneNode(true);\r\n    copySvg.style.opacity = 1;\r\n    copySvg.style.transition = \"1000ms\";\r\n    copySvg.style.position = \"absolute\";\r\n    copySvg.style.left = svgRef.current.getBoundingClientRect().left + \"px\";\r\n    copySvg.style.top = svgRef.current.getBoundingClientRect().top + \"px\";\r\n    copySvg.style.transformOrigin = \"left\";\r\n\r\n    copySvg.classList.add(`copySvg${lineLevel}`);\r\n\r\n    setTimeout(() => {\r\n      if (lineLevel < 2) {\r\n        copySvg.style.left = 0 + \"px\";\r\n        copySvg.style.top = 325 + 115 * lineLevel + \"px\";\r\n        copySvg.style.height =\r\n          svgRef.current.getBoundingClientRect().height / 2 + \"px\";\r\n        copySvg.style.width =\r\n          svgRef.current.getBoundingClientRect().width / 2 + \"px\";\r\n      } else {\r\n        const moveCopySvg = (copySvg, lineLevel) => {\r\n          copySvg.style.left =\r\n            window.innerWidth / 2 -\r\n            svgRef.current.getBoundingClientRect().width / 2 / 2 +\r\n            \"px\";\r\n          copySvg.style.top = 125 + 200 * lineLevel + \"px\";\r\n          copySvg.style.height =\r\n            svgRef.current.getBoundingClientRect().height / 2 + \"px\";\r\n          copySvg.style.width =\r\n            svgRef.current.getBoundingClientRect().width / 2 + \"px\";\r\n        };\r\n\r\n        moveCopySvg(document.querySelector(\".copySvg0\"), 0);\r\n        moveCopySvg(document.querySelector(\".copySvg1\"), 1);\r\n        moveCopySvg(copySvg, 2);\r\n      }\r\n    }, 0);\r\n\r\n    document.querySelector(\".svg-copy\").appendChild(copySvg);\r\n\r\n    let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n    if (lineLevel < 2) {\r\n      for (let i = 0; i < ballList.length; i++) {\r\n        ballList[i].style.transition = \"1000ms\";\r\n\r\n        ballList[i].style.cursor = \"default\";\r\n        ballList[i].style.width = \"40px\";\r\n        ballList[i].style.height = \"40px\";\r\n        ballList[i].style.fontSize = \"7px\";\r\n        ballList[i].style.left =\r\n          0 +\r\n          (ballList[i].getBoundingClientRect().left -\r\n            svgRef.current.getBoundingClientRect().left) /\r\n            2 +\r\n          \"px\";\r\n        ballList[i].style.top =\r\n          325 +\r\n          115 * lineLevel +\r\n          (ballList[i].getBoundingClientRect().top -\r\n            svgRef.current.getBoundingClientRect().top) /\r\n            2 +\r\n          \"px\";\r\n\r\n        setTimeout(() => {\r\n          ballList[i].replaceWith(ballList[i].cloneNode(true));\r\n        }, 1000);\r\n\r\n        ballList[i].className = `cloneBallDone${lineLevel}`;\r\n      }\r\n    } else {\r\n      const finalPositionBall = (ballList, lineLevel) => {\r\n        for (let i = 0; i < ballList.length; i++) {\r\n          ballList[i].style.transition = \"1000ms\";\r\n\r\n          ballList[i].style.cursor = \"default\";\r\n          ballList[i].style.width = \"40px\";\r\n          ballList[i].style.height = \"40px\";\r\n          ballList[i].style.fontSize = \"7px\";\r\n\r\n          if (lineLevel === 2) {\r\n            ballList[i].style.left =\r\n              window.innerWidth / 2 -\r\n              svgRef.current.getBoundingClientRect().width / 2 / 2 +\r\n              (ballList[i].getBoundingClientRect().left -\r\n                svgRef.current.getBoundingClientRect().left) /\r\n                2 +\r\n              \"px\";\r\n            ballList[i].style.top =\r\n              125 +\r\n              200 * lineLevel +\r\n              (ballList[i].getBoundingClientRect().top -\r\n                svgRef.current.getBoundingClientRect().top) /\r\n                2 +\r\n              \"px\";\r\n          } else {\r\n            ballList[i].style.left =\r\n              parseFloat(ballList[i].style.left) +\r\n              window.innerWidth / 2 -\r\n              svgRef.current.getBoundingClientRect().width / 2 / 2 +\r\n              \"px\";\r\n            ballList[i].style.top =\r\n              125 +\r\n              200 * lineLevel +\r\n              parseFloat(ballList[i].style.top) -\r\n              325 -\r\n              115 * lineLevel +\r\n              \"px\";\r\n          }\r\n\r\n          setTimeout(() => {\r\n            ballList[i].replaceWith(ballList[i].cloneNode(true));\r\n          }, 1000);\r\n        }\r\n      };\r\n\r\n      let ballList1 = Array.from(document.querySelectorAll(\".cloneBallDone0\"));\r\n      let ballList2 = Array.from(document.querySelectorAll(\".cloneBallDone1\"));\r\n\r\n      finalPositionBall(ballList1, 0);\r\n      finalPositionBall(ballList2, 1);\r\n      finalPositionBall(ballList, 2);\r\n    }\r\n\r\n    if (ballList.length >= 3) {\r\n      let validIndex = ballList.length - 1;\r\n\r\n      if (\r\n        Array.from(ballList[validIndex].classList).findIndex(\r\n          (el) => el === \"lastChild\"\r\n        ) !== -1\r\n      ) {\r\n        validIndex--;\r\n      }\r\n\r\n      const copyHalfCircle = document\r\n        .querySelector(\".verb-half-circle\")\r\n        .cloneNode(true);\r\n\r\n      copyHalfCircle.style.transition = 1000 + \"ms\";\r\n      copyHalfCircle.style.zIndex = -lineLevel - 1;\r\n\r\n      copyHalfCircle.classList.add(`cloneHalfCircle${lineLevel}`);\r\n\r\n      document\r\n        .querySelector(`.clone-verb-circle${lineLevel}`)\r\n        .appendChild(copyHalfCircle);\r\n\r\n      if (lineLevel < 2) {\r\n        copyHalfCircle.style.left =\r\n          (ballList[1].getBoundingClientRect().left -\r\n            svgRef.current.getBoundingClientRect().left) /\r\n            2 +\r\n          \"px\";\r\n\r\n        copyHalfCircle.style.top =\r\n          325 + 115 * lineLevel - 35 * (validIndex - 2) + \"px\";\r\n      } else {\r\n        copyHalfCircle.style.left =\r\n          (ballList[1].getBoundingClientRect().left -\r\n            svgRef.current.getBoundingClientRect().left) /\r\n            2 +\r\n          window.innerWidth / 2 -\r\n          svgRef.current.getBoundingClientRect().width / 2 / 2 +\r\n          \"px\";\r\n\r\n        copyHalfCircle.style.top =\r\n          95 +\r\n          200 * lineLevel +\r\n          (325 +\r\n            115 * lineLevel -\r\n            35 * (validIndex - 2) -\r\n            325 -\r\n            115 * lineLevel) +\r\n          \"px\";\r\n      }\r\n\r\n      copyHalfCircle.style.width =\r\n        (ballList[ballList.length - 1].getBoundingClientRect().left -\r\n          svgRef.current.getBoundingClientRect().left) /\r\n          2 -\r\n        (ballList[1].getBoundingClientRect().left -\r\n          svgRef.current.getBoundingClientRect().left) /\r\n          2 +\r\n        40 +\r\n        \"px\";\r\n      copyHalfCircle.style.height =\r\n        (ballList[ballList.length - 1].getBoundingClientRect().left -\r\n          svgRef.current.getBoundingClientRect().left) /\r\n          2 -\r\n        (ballList[1].getBoundingClientRect().left -\r\n          svgRef.current.getBoundingClientRect().left) /\r\n          2 +\r\n        40 +\r\n        \"px\";\r\n\r\n      copyHalfCircle.style.borderWidth =\r\n        parseFloat(copyHalfCircle.style.borderWidth) / 3 + \"px\";\r\n\r\n      copyHalfCircle.querySelector(\".cut\").style.borderWidth =\r\n        verbCircle.borderWidth + \"px\";\r\n      copyHalfCircle.querySelector(\".cut\").style.width =\r\n        verbCircle.width + 10 + \"px\";\r\n      copyHalfCircle.querySelector(\".cut\").style.height =\r\n        verbCircle.width / 2.41 + \"px\";\r\n      copyHalfCircle.querySelector(\".cut\").style.top =\r\n        -verbCircle.borderWidth + \"px\";\r\n      copyHalfCircle.querySelector(\".cut\").style.left =\r\n        -verbCircle.borderWidth - 10 + \"px\";\r\n\r\n      setVerbCircle({\r\n        opacity: 0,\r\n        left: \"50%\",\r\n        top: dropZoneRef.current.getBoundingClientRect().bottom,\r\n        height: 0,\r\n        width: 0,\r\n        borderWidth: 25,\r\n      });\r\n    }\r\n\r\n    if (lineLevel === 2) {\r\n      const moveHalfCircle = (copyHalfCircle, lineLevel) => {\r\n        copyHalfCircle.style.left =\r\n          parseFloat(copyHalfCircle.style.left) +\r\n          window.innerWidth / 2 -\r\n          svgRef.current.getBoundingClientRect().width / 2 / 2 +\r\n          \"px\";\r\n\r\n        copyHalfCircle.style.top =\r\n          125 +\r\n          200 * lineLevel +\r\n          (parseFloat(copyHalfCircle.style.top) - 325 - 115 * lineLevel) +\r\n          \"px\";\r\n      };\r\n\r\n      if (document.querySelector(\".cloneHalfCircle0\")) {\r\n        moveHalfCircle(document.querySelector(\".cloneHalfCircle0\"), 0);\r\n      }\r\n\r\n      if (document.querySelector(\".cloneHalfCircle1\")) {\r\n        moveHalfCircle(document.querySelector(\".cloneHalfCircle1\"), 1);\r\n      }\r\n    }\r\n\r\n    setBallStatus((prev) => {\r\n      let list = [...prev];\r\n\r\n      for (let i = 0; i < list.length; i++) {\r\n        if (i === 1) continue;\r\n\r\n        for (let j = 0; j < list[i].length; j++) {\r\n          if (!ballActive[i][j]) {\r\n            list[i][j] = true;\r\n          } else {\r\n            list[i][j] = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return list;\r\n    });\r\n    setLineLevel((prev) => prev + 1);\r\n    setButtonShow(false);\r\n    setActiveContainer(5);\r\n\r\n    setTimeout(() => {\r\n      setActiveContainer(0);\r\n    }, 1250);\r\n  };\r\n\r\n  //BAR\r\n  const [helpFingerPosition, setHelpFingerPosition] = useState([]);\r\n  const [helpOverlay, setHelpOverlay] = useState();\r\n\r\n  useEffect(() => {\r\n    if (helpOverlay) {\r\n      let element;\r\n      let stop = false;\r\n\r\n      let containerIndex;\r\n      let ballIndex;\r\n\r\n      if (!buttonShow) {\r\n        for (let i = activeContainer; i < ballStatus.length; i++) {\r\n          if (stop) break;\r\n\r\n          for (let j = 0; j < ballStatus.length; j++) {\r\n            if (ballStatus[i][j]) {\r\n              element = document.querySelector(`.element${i}${j}`);\r\n\r\n              containerIndex = i;\r\n              ballIndex = j;\r\n\r\n              stop = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setHelpFingerPosition([\r\n          element.getBoundingClientRect().left + 30,\r\n          element.getBoundingClientRect().top + 30,\r\n        ]);\r\n\r\n        let ball = element.children[0].cloneNode(true);\r\n\r\n        ball.style.opacity = \"1\";\r\n        ball.style.position = \"absolute\";\r\n        ball.style.cursor = \"pointer\";\r\n        ball.style.zIndex = \"10000\";\r\n\r\n        ball.style.left = element.getBoundingClientRect().left + \"px\";\r\n        ball.style.top = element.getBoundingClientRect().top + \"px\";\r\n\r\n        ball.setAttribute(\"containerIndex\", containerIndex);\r\n        ball.setAttribute(\"ballIndex\", ballIndex);\r\n        ball.classList.add(\"ballClone\");\r\n\r\n        if (activeContainer > 1) {\r\n          document\r\n            .getElementById(\"clone-div\")\r\n            .insertBefore(ball, document.querySelector(\".lastChild\"));\r\n        } else {\r\n          document.getElementById(\"clone-div\").appendChild(ball);\r\n        }\r\n\r\n        ball.style.transition = \"linear 1000ms\";\r\n\r\n        setTimeout(() => {\r\n          setHelpFingerPosition([\r\n            svgRef.current.getBoundingClientRect().left +\r\n              svgRef.current.getBoundingClientRect().width / 2,\r\n            svgRef.current.getBoundingClientRect().top,\r\n          ]);\r\n\r\n          ball.style.left =\r\n            svgRef.current.getBoundingClientRect().left +\r\n            svgRef.current.getBoundingClientRect().width / 2 -\r\n            30 +\r\n            \"px\";\r\n          ball.style.top =\r\n            svgRef.current.getBoundingClientRect().top - 30 + \"px\";\r\n\r\n          setBallActive((prev) => {\r\n            let list = [...prev];\r\n            list[containerIndex][ballIndex] = true;\r\n\r\n            return list;\r\n          });\r\n          // setBallStatus((prev) => {\r\n          //   let list = [...prev];\r\n          //   list[containerIndex][ballIndex] = false;\r\n\r\n          //   return list;\r\n          // });\r\n\r\n          setTimeout(() => {\r\n            setHelpFingerPosition(\"init\");\r\n            setHelpFingerPosition(false);\r\n\r\n            //\r\n\r\n            setBallPosition();\r\n\r\n            if (containerIndex > 0) {\r\n              setTimeout(() => {\r\n                setVerbCirclePosition(containerIndex);\r\n              }, 200);\r\n            }\r\n\r\n            let ballList = Array.from(document.querySelectorAll(\".ballClone\"));\r\n\r\n            let validIndex = ballList.length - 1;\r\n\r\n            setButtonShow(\r\n              +ballList[ballList.length - 2]?.getAttribute(\"containerindex\") !==\r\n                1\r\n            );\r\n\r\n            if (\r\n              Array.from(ballList[validIndex].classList).findIndex(\r\n                (el) => el === \"lastChild\"\r\n              ) !== -1\r\n            ) {\r\n              validIndex--;\r\n            }\r\n\r\n            let nextContainerIndex =\r\n              +ballList[validIndex].getAttribute(\"containerindex\") + 1;\r\n\r\n            let stop = false;\r\n\r\n            for (let i = nextContainerIndex; i < 5; i++) {\r\n              if (stop) break;\r\n              for (let j = 0; j < ballActiveStatus[i].length; j++) {\r\n                if (ballActiveStatus[i][j]) {\r\n                  stop = true;\r\n                  nextContainerIndex = i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!stop) {\r\n              setActiveContainer(5);\r\n              setButtonShow(true);\r\n            } else {\r\n              setActiveContainer(nextContainerIndex);\r\n            }\r\n\r\n            ball.style.zIndex = \"1000\";\r\n\r\n            //\r\n\r\n            ball.addEventListener(\"mousedown\", (e) => {\r\n              activeMovement(\r\n                e,\r\n                ball,\r\n                containerIndex,\r\n                ballIndex,\r\n                element.getBoundingClientRect().left,\r\n                element.getBoundingClientRect().top,\r\n                false,\r\n                false\r\n              );\r\n            });\r\n          }, 1250);\r\n        }, 1250);\r\n      } else {\r\n        const button = document.querySelector(\".submitButton\");\r\n        const buttonStyle = button.getBoundingClientRect();\r\n\r\n        setHelpFingerPosition([\r\n          buttonStyle.left + buttonStyle.width / 2,\r\n          buttonStyle.top + buttonStyle.height / 2,\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n          button.click();\r\n          setHelpFingerPosition(\"init\");\r\n          setHelpFingerPosition(false);\r\n        }, 1250);\r\n      }\r\n    }\r\n  }, [helpOverlay]);\r\n\r\n  return (\r\n    <>\r\n      <StatusBar\r\n        infoText={\r\n          <p>\r\n            Bilde Sätze. Nimm die Kugeln aus dem Kasten und leg <br /> sie in\r\n            die Schale.\r\n          </p>\r\n        }\r\n        helpFingerPosition={helpFingerPosition}\r\n        setHelpOverlay={setHelpOverlay}\r\n      />\r\n      <div className=\"game2\">\r\n        {\r\n          <div\r\n            className=\"wrapper\"\r\n            style={{\r\n              position: \"relative\",\r\n              top: lineLevel < 3 ? 0 : -500,\r\n              transition: \"1000ms\",\r\n            }}\r\n          >\r\n            <Group>\r\n              {wordList.map((container, containerIndex) => (\r\n                <Container\r\n                  inLine={containerIndex === 1 ? 6 : 2}\r\n                  inRow={containerIndex === 1 ? 3 : 2}\r\n                  active={containerIndex === activeContainer}\r\n                  containerRef={containerRef[containerIndex]}\r\n                >\r\n                  {container.map((word, wordIndex) => {\r\n                    return (\r\n                      <div\r\n                        className={`element ${`element${containerIndex}${wordIndex}`}`}\r\n                        style={{\r\n                          position: \"relative\",\r\n                          left: word.x,\r\n                          top: word.y,\r\n                          zIndex: word.zIndex,\r\n                          transition: `${word.transition}ms`,\r\n                          cursor:\r\n                            containerIndex === activeContainer &&\r\n                            ballStatus[containerIndex][wordIndex]\r\n                              ? \"pointer\"\r\n                              : \"default\",\r\n                          borderRadius: \"50%\",\r\n                          opacity: ballActive[containerIndex][wordIndex]\r\n                            ? 0\r\n                            : ballStatus[containerIndex][wordIndex]\r\n                            ? 1\r\n                            : 0.5,\r\n                        }}\r\n                        ref={ballRefs.current[containerIndex][wordIndex]}\r\n                        onMouseDown={(event) => {\r\n                          if (containerIndex !== activeContainer) return;\r\n                          handleCopyElement(event, containerIndex, wordIndex);\r\n                        }}\r\n                      >\r\n                        <Ball\r\n                          color={containerIndex === 1 ? \"#3FA0C8\" : \"#8D9599\"}\r\n                        >\r\n                          {word}\r\n                        </Ball>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </Container>\r\n              ))}\r\n            </Group>\r\n          </div>\r\n        }\r\n\r\n        <div id=\"clone-div\"></div>\r\n\r\n        <div className=\"svg-copy\"></div>\r\n        <div className=\"drop-zone\" ref={dropZoneRef}>\r\n          <svg\r\n            ref={svgRef}\r\n            width=\"585\"\r\n            height=\"130\"\r\n            viewBox=\"0 0 685 130\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M684.561 26.5884C583.244 93.8771 464.344 129.815 342.718 129.91C221.092 130.006 102.135 94.2556 0.712799 27.1263L17.9111 1.14221C114.226 64.891 227.193 98.8412 342.693 98.7504C458.194 98.6595 571.107 64.5315 667.322 0.631348L684.561 26.5884Z\"\r\n              fill=\"#C4C4C4\"\r\n            />\r\n          </svg>\r\n\r\n          <div className=\"circle\"></div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"verb-half-circle\"\r\n          style={{\r\n            opacity: verbCircle.opacity,\r\n            left: verbCircle.left,\r\n            width: verbCircle.width,\r\n            height: verbCircle.width,\r\n            top: verbCircle.top,\r\n            borderWidth: verbCircle.borderWidth,\r\n            transition: verbCircle.transition + \"ms\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"cut\"\r\n            style={{\r\n              borderWidth: verbCircle.borderWidth,\r\n              width: verbCircle.width + 10,\r\n              height: verbCircle.width / 2.41,\r\n              top: -verbCircle.borderWidth,\r\n              left: -verbCircle.borderWidth - 10,\r\n              transition: verbCircle.transition + \"ms\",\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <div className=\"clone-verb-circle0\"></div>\r\n        <div className=\"clone-verb-circle1\"></div>\r\n        <div className=\"clone-verb-circle2\"></div>\r\n        {buttonShow && (\r\n          <p className=\"button submitButton\" onClick={handleSubmit}>\r\n            Weiter\r\n          </p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game2;\r\n","export default __webpack_public_path__ + \"static/media/arrow_down.280089b6.svg\";","export default __webpack_public_path__ + \"static/media/story1a.f7a200cf.jpg\";","export default __webpack_public_path__ + \"static/media/wrong.e1e9b4ab.svg\";","export default __webpack_public_path__ + \"static/media/story2a.adddb3db.jpg\";","export default __webpack_public_path__ + \"static/media/story3a.4ca96443.jpg\";","export default __webpack_public_path__ + \"static/media/story4a.95d75db4.jpg\";","export default __webpack_public_path__ + \"static/media/story5a.dc98ae8a.jpg\";","export default __webpack_public_path__ + \"static/media/story6a.4aedd56b.jpg\";","export default __webpack_public_path__ + \"static/media/story1b.ed7904a9.jpg\";","export default __webpack_public_path__ + \"static/media/story2b.2dd7bb0a.jpg\";","export default __webpack_public_path__ + \"static/media/story3b.7a51b511.jpg\";","export default __webpack_public_path__ + \"static/media/story4b.21d12aa3.jpg\";","export default __webpack_public_path__ + \"static/media/story5b.c6d6e777.jpg\";","export default __webpack_public_path__ + \"static/media/story6b.ec676614.jpg\";","export default __webpack_public_path__ + \"static/media/1a.c6336072.mp3\";","export default __webpack_public_path__ + \"static/media/2a.0f82a434.mp3\";","export default __webpack_public_path__ + \"static/media/3a.241086d7.mp3\";","export default __webpack_public_path__ + \"static/media/4a.db7ac472.mp3\";","export default __webpack_public_path__ + \"static/media/5a.c21f11a9.mp3\";","export default __webpack_public_path__ + \"static/media/6a.5e77675e.mp3\";","export default __webpack_public_path__ + \"static/media/1b.69f0dd5e.mp3\";","export default __webpack_public_path__ + \"static/media/2b.48f7b771.mp3\";","export default __webpack_public_path__ + \"static/media/3b.1358016f.mp3\";","export default __webpack_public_path__ + \"static/media/4b.caf720ed.mp3\";","export default __webpack_public_path__ + \"static/media/5b.203d5b0e.mp3\";","export default __webpack_public_path__ + \"static/media/6b.18ff52ea.mp3\";","import { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Indicator = ({ active = false, wrong = false }) => {\r\n  const [animationStart, setAnimationStart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setAnimationStart(active);\r\n    }, 0);\r\n  }, [active]);\r\n\r\n  let Indicator = {\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: `translate(-50%, -50%) ${\r\n      animationStart ? \"scale(1.5)\" : \"scale(1)\"\r\n    }`,\r\n    zIndex: \"10000\",\r\n    height: \"150px\",\r\n    width: \"150px\",\r\n    backgroundColor: wrong ? \"#EB8336\" : \"#a0c814\",\r\n    borderRadius: \"50%\",\r\n    display: active ? \"flex\" : \"none\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: \"50px\",\r\n    pointerEvents: \"none\",\r\n    transition: \"1s\",\r\n    opacity: animationStart ? 0 : 1,\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"Indicator\" style={Indicator}>\r\n      {wrong ? (\r\n        <svg\r\n          width=\"352\"\r\n          height=\"512\"\r\n          viewBox=\"0 0 352 512\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <g clipPath=\"url(#clip0_165:2)\">\r\n            <path\r\n              d=\"M242.72 256L342.79 155.93C355.07 143.65 355.07 123.74 342.79 111.45L320.55 89.21C308.27 76.93 288.36 76.93 276.07 89.21L176 189.28L75.93 89.21C63.65 76.93 43.74 76.93 31.45 89.21L9.21 111.45C-3.07 123.73 -3.07 143.64 9.21 155.93L109.28 256L9.21 356.07C-3.07 368.35 -3.07 388.26 9.21 400.55L31.45 422.79C43.73 435.07 63.65 435.07 75.93 422.79L176 322.72L276.07 422.79C288.35 435.07 308.27 435.07 320.55 422.79L342.79 400.55C355.07 388.27 355.07 368.36 342.79 356.07L242.72 256Z\"\r\n              fill=\"white\"\r\n            />\r\n          </g>\r\n          <defs>\r\n            <clipPath id=\"clip0_165:2\">\r\n              <rect width=\"352\" height=\"512\" fill=\"white\" />\r\n            </clipPath>\r\n          </defs>\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          width=\"512\"\r\n          height=\"382\"\r\n          viewBox=\"0 0 512 382\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M173.898 374.404L7.49799 208.004C-2.49901 198.007 -2.49901 181.798 7.49799 171.8L43.701 135.596C53.698 125.598 69.908 125.598 79.905 135.596L192 247.69L432.095 7.596C442.092 -2.401 458.302 -2.401 468.299 7.596L504.502 43.8C514.499 53.797 514.499 70.006 504.502 80.004L210.102 374.405C200.104 384.402 183.895 384.402 173.898 374.404Z\"\r\n            fill=\"white\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </div>,\r\n    document.querySelector(\"#indicator\")\r\n  );\r\n};\r\n\r\nexport default Indicator;\r\n","import React, { useState, useEffect, useRef, createRef } from \"react\";\r\n\r\nimport \"../css/game1.css\";\r\n\r\nimport Image1a from \"../assets/img/story1a.jpg\";\r\nimport Image2a from \"../assets/img/story2a.jpg\";\r\nimport Image3a from \"../assets/img/story3a.jpg\";\r\nimport Image4a from \"../assets/img/story4a.jpg\";\r\nimport Image5a from \"../assets/img/story5a.jpg\";\r\nimport Image6a from \"../assets/img/story6a.jpg\";\r\n\r\nimport Image1b from \"../assets/img/story1b.jpg\";\r\nimport Image2b from \"../assets/img/story2b.jpg\";\r\nimport Image3b from \"../assets/img/story3b.jpg\";\r\nimport Image4b from \"../assets/img/story4b.jpg\";\r\nimport Image5b from \"../assets/img/story5b.jpg\";\r\nimport Image6b from \"../assets/img/story6b.jpg\";\r\n\r\nimport Audio1a from \"../assets/audio/1a.mp3\";\r\nimport Audio2a from \"../assets/audio/2a.mp3\";\r\nimport Audio3a from \"../assets/audio/3a.mp3\";\r\nimport Audio4a from \"../assets/audio/4a.mp3\";\r\nimport Audio5a from \"../assets/audio/5a.mp3\";\r\nimport Audio6a from \"../assets/audio/6a.mp3\";\r\n\r\nimport Audio1b from \"../assets/audio/1b.mp3\";\r\nimport Audio2b from \"../assets/audio/2b.mp3\";\r\nimport Audio3b from \"../assets/audio/3b.mp3\";\r\nimport Audio4b from \"../assets/audio/4b.mp3\";\r\nimport Audio5b from \"../assets/audio/5b.mp3\";\r\nimport Audio6b from \"../assets/audio/6b.mp3\";\r\nimport Indicator from \"../UI/Indicator\";\r\n\r\nconst imageObj = [\r\n  {\r\n    id: 0,\r\n    img: Image2a,\r\n    nextImg: Image2b,\r\n    text: \"Rot steht dir gut.\",\r\n    nextText: \"Probier mal dieses Kleid.\",\r\n    answerIndex: 0,\r\n    audio: Audio1a,\r\n    nextAudio: Audio1b,\r\n  },\r\n  {\r\n    id: 1,\r\n    img: Image3a,\r\n    nextImg: Image3b,\r\n    text: \"Der Zug fährt gleich.\",\r\n    nextText: \"Steigt lieber schon ein.\",\r\n    answerIndex: 0,\r\n    audio: Audio2a,\r\n    nextAudio: Audio2b,\r\n  },\r\n  {\r\n    id: 2,\r\n    img: Image1b,\r\n    nextImg: Image1a,\r\n    text: \"Oh! Es gibt eine Umleitung!\",\r\n    nextText: \"Fahr geradeaus!\",\r\n    answerIndex: 1,\r\n    audio: Audio3a,\r\n    nextAudio: Audio3b,\r\n  },\r\n  {\r\n    id: 3,\r\n    img: Image4a,\r\n    nextImg: Image4b,\r\n    text: \"Mein Koffer ist so schwer!\",\r\n    nextText: \"Helft mir bitte!\",\r\n    answerIndex: 2,\r\n    audio: Audio4a,\r\n    nextAudio: Audio4b,\r\n  },\r\n  {\r\n    id: 4,\r\n    img: Image5a,\r\n    nextImg: Image5b,\r\n    text: \"Ich habe zu viele Sachen gekauft.\",\r\n    nextText: \"Geben Sie mir bitte eine Tüte!\",\r\n    answerIndex: 2,\r\n    audio: Audio5a,\r\n    nextAudio: Audio5b,\r\n  },\r\n  {\r\n    id: 5,\r\n    img: Image6a,\r\n    nextImg: Image6b,\r\n    text: \"Erzählen Sie!\",\r\n    nextText: \"Herr Kommissar, meine Nachbarn sind sehr laut.\",\r\n    answerIndex: 1,\r\n    audio: Audio6a,\r\n    nextAudio: Audio6b,\r\n  },\r\n];\r\n\r\nconst Game1 = () => {\r\n  const optionsRef = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const [imageWidth, setImageWidth] = useState(0);\r\n  const audioRef = useRef(null);\r\n  const [indicator, setIndicator] = useState({\r\n    active: false,\r\n    wrong: false,\r\n  });\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const [activeImage, setActiveImage] = useState();\r\n\r\n  const imagesRef = imageObj.map((element, i) => createRef(null));\r\n\r\n  const setWidthContainer = () => {\r\n    setImageWidth(\r\n      200 * Math.ceil(imageRef.current.children.length / 2) +\r\n        75 * (Math.ceil(imageRef.current.children.length / 2) - 1)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWidthContainer();\r\n  }, []);\r\n\r\n  const handleClick = (initEvent) => {\r\n    const element = initEvent.target;\r\n\r\n    if (element.getAttribute(\"disableClick\") === \"true\") return;\r\n    setLevel((prev) => prev + 1);\r\n\r\n    element.setAttribute(\"disableClick\", \"true\");\r\n\r\n    const elementIndex = +element.getAttribute(\"index\");\r\n\r\n    setActiveImage(elementIndex);\r\n\r\n    element.style.left = element.getBoundingClientRect().left + \"px\";\r\n    element.style.top = element.getBoundingClientRect().top + \"px\";\r\n    element.style.width = element.getBoundingClientRect().width + \"px\";\r\n    element.style.cursor = \"default\";\r\n\r\n    element.parentElement.style.top = \"-500px\";\r\n    element.parentElement.style.opacity = 0;\r\n\r\n    audioRef.current.src = imageObj[elementIndex].audio;\r\n\r\n    document.querySelector(\".clone\").appendChild(element);\r\n\r\n    setTimeout(() => {\r\n      element.style.left = (window.innerWidth - 500) / 2 + \"px\";\r\n      element.style.top = 125 + \"px\";\r\n      element.style.width = \"500px\";\r\n\r\n      setTimeout(() => {\r\n        audioRef.current.play();\r\n\r\n        const textElement = element.parentElement.children[0];\r\n        textElement.innerHTML = imageObj[elementIndex].text;\r\n        textElement.style.opacity = 1;\r\n\r\n        setTimeout(() => {\r\n          let duration = audioRef.current.duration * 1000;\r\n\r\n          setTimeout(() => {\r\n            element.style.opacity = 0;\r\n\r\n            setTimeout(() => {\r\n              textElement.innerHTML = imageObj[elementIndex].nextText;\r\n              element.src = imageObj[elementIndex].nextImg;\r\n              element.style.opacity = 1;\r\n\r\n              audioRef.current.src = imageObj[elementIndex].nextAudio;\r\n              audioRef.current.play();\r\n\r\n              setTimeout(() => {\r\n                let duration = audioRef.current.duration * 1000;\r\n\r\n                setTimeout(() => {\r\n                  textElement.style.fontSize = \"12px\";\r\n                  textElement.style.width = \"300px\";\r\n                  textElement.style.top = 305 + \"px\";\r\n                  element.style.width = \"300px\";\r\n                  element.style.left =\r\n                    (window.innerWidth - 500) / 2 + 100 + \"px\";\r\n                  element.style.top = 80 + \"px\";\r\n\r\n                  optionsRef.current.style.opacity = 1;\r\n                  optionsRef.current.style.top = \"380px\";\r\n                }, duration);\r\n              }, 500);\r\n            }, 250);\r\n          }, duration);\r\n        }, 250);\r\n      }, 500);\r\n    }, 0);\r\n\r\n    setWidthContainer();\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(level);\r\n  }, [level]);\r\n\r\n  const handleImageOption = (initEvent, index) => {\r\n    if (level === 6) return;\r\n    let targetElement;\r\n    if (index === imageObj[activeImage].answerIndex) {\r\n      const childrenList = Array.from(initEvent.target.parentElement.children);\r\n\r\n      for (let i = 0; i < childrenList.length; i++) {\r\n        if (\r\n          childrenList[i].getAttribute(\"src\") !== null &&\r\n          childrenList[i].getAttribute(\"src\") === \"\"\r\n        ) {\r\n          targetElement = childrenList[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      const textElement =\r\n        imagesRef[activeImage].current.parentElement.children[0];\r\n\r\n      const parentElement = imageRef.current;\r\n\r\n      targetElement.src = imageObj[activeImage].nextImg;\r\n\r\n      targetElement.style.left =\r\n        imagesRef[activeImage].current.getBoundingClientRect().left -\r\n        targetElement.getBoundingClientRect().left +\r\n        \"px\";\r\n      targetElement.style.top =\r\n        imagesRef[activeImage].current.getBoundingClientRect().top -\r\n        1 -\r\n        targetElement.getBoundingClientRect().top +\r\n        \"px\";\r\n      targetElement.style.transform = \"scale(2.5)\";\r\n\r\n      imagesRef[activeImage].current.display = \"none\";\r\n      textElement.style.display = \"none\";\r\n      setTimeout(() => {\r\n        imagesRef[activeImage].current.remove();\r\n        targetElement.style.transition = \"250ms linear\";\r\n        targetElement.style.left = 0 + \"px\";\r\n        targetElement.style.top = 0 + \"px\";\r\n        targetElement.style.transform = \"scale(1)\";\r\n\r\n        setIndicator({ active: true, wrong: false });\r\n\r\n        textElement.style.display = \"\";\r\n        textElement.style.opacity = 0;\r\n        textElement.style.width = \"500px\";\r\n        textElement.style.fontSize = \"16px\";\r\n        textElement.style.left = \"0px\";\r\n        textElement.style.top = \"500px\";\r\n\r\n        setTimeout(() => {\r\n          setIndicator({ active: false, wrong: false });\r\n          if (level < 6) {\r\n            optionsRef.current.style.opacity = 0;\r\n            optionsRef.current.style.top = \"120%\";\r\n\r\n            parentElement.style.top = \"0px\";\r\n            parentElement.style.opacity = 1;\r\n          } else {\r\n            optionsRef.current.style.top = \"80px\";\r\n\r\n            const optionImage = Array.from(\r\n              document.querySelectorAll(\".option-image\")\r\n            );\r\n\r\n            for (let i = 0; i < optionImage.length; i++) {\r\n              optionImage[i].style.width = \"135%\";\r\n            }\r\n          }\r\n        }, 1000);\r\n      }, 100);\r\n    } else {\r\n      setIndicator({ active: true, wrong: true });\r\n\r\n      setTimeout(() => {\r\n        setIndicator({ active: false, wrong: true });\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game1\">\r\n        <audio ref={audioRef} controls>\r\n          <source src=\"\" type=\"audio/ogg\" />\r\n        </audio>\r\n\r\n        <div ref={imageRef} className=\"images\" style={{ width: imageWidth }}>\r\n          {imageObj.map((item, index) => (\r\n            <img\r\n              onClick={handleClick}\r\n              key={item.id}\r\n              index={item.id}\r\n              src={item.img}\r\n              alt=\"\"\r\n              ref={imagesRef[index]}\r\n              disableClick={\"false\"}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"clone\">\r\n          <div className=\"text\"></div>\r\n        </div>\r\n        <div className=\"options\" ref={optionsRef}>\r\n          <div className=\"option option1\">\r\n            <div\r\n              className={`btn ${level === 6 ? \"\" : \"btn-hover\"}`}\r\n              onClick={(e) => handleImageOption(e, 0)}\r\n            >\r\n              Tipp\r\n            </div>\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n          </div>\r\n          <div className=\"option option2\">\r\n            <div\r\n              className={`btn ${level === 6 ? \"\" : \"btn-hover\"}`}\r\n              onClick={(e) => handleImageOption(e, 1)}\r\n            >\r\n              Aufforderung\r\n            </div>\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n          </div>\r\n          <div className=\"option option3\">\r\n            <div\r\n              className={`btn ${level === 6 ? \"\" : \"btn-hover\"}`}\r\n              onClick={(e) => handleImageOption(e, 2)}\r\n            >\r\n              Bitte\r\n            </div>\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n            <img class=\"option-image\" src=\"\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Indicator active={indicator.active} wrong={indicator.wrong} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game1;\r\n","const wordList = [\r\n  [\"Peter\", \"Sie\", \"Frau Müller\", \"Das Kind\"],\r\n  [\r\n    \"macht\",\r\n    \"zu\",\r\n    \"kann\",\r\n    \"malen\",\r\n    \"hat\",\r\n    \"gekauft\",\r\n    \"steht\",\r\n    \"auf\",\r\n    \"muss\",\r\n    \"lernen\",\r\n    \"hat\",\r\n    \"gelesen\",\r\n    \"ruft\",\r\n    \"an\",\r\n    \"will\",\r\n    \"spielen\",\r\n    \"ist\",\r\n    \"gekom- men\",\r\n  ],\r\n  [\"zu Hause\", \"im Laden\", \"draußen\", \"ins Kino\"],\r\n  [\"Voka- beln\", \"ein Buch\", \"mich\", \"Geige\"],\r\n  [\"um 6 Uhr\", \"gestern\", \"im Juli\", \"am Abend\"],\r\n];\r\n\r\nexport default wordList;\r\n","export default __webpack_public_path__ + \"static/media/subtract.86d0e8f7.svg\";","export default __webpack_public_path__ + \"static/media/arrow.6af90567.svg\";","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport DropZone from \"../assets/img/SVG/subtract.svg\";\r\nimport Indicator from \"../UI/Indicator\";\r\n\r\nconst sentenceList = [\r\n  {\r\n    words: [\r\n      {\r\n        word: \"Peter\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"steht\",\r\n        allowed: [1],\r\n      },\r\n      {\r\n        word: \"sonntags\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"spät\",\r\n        allowed: [3],\r\n      },\r\n      {\r\n        word: \"auf\",\r\n        allowed: [4],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    words: [\r\n      {\r\n        word: \"sie\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"wollen\",\r\n        allowed: [1],\r\n      },\r\n      {\r\n        word: \"im Sommer\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"nach Spanien\",\r\n        allowed: [3],\r\n      },\r\n      {\r\n        word: \"reisen\",\r\n        allowed: [4],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    words: [\r\n      {\r\n        word: \"meine Oma\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"hat\",\r\n        allowed: [1],\r\n      },\r\n      {\r\n        word: \"gestern\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"einen Kuchen\",\r\n        allowed: [3],\r\n      },\r\n      {\r\n        word: \"gebacken\",\r\n        allowed: [4],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    words: [\r\n      {\r\n        word: \"man\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"darf\",\r\n        allowed: [1],\r\n      },\r\n      {\r\n        word: \"hier\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"nicht\",\r\n        allowed: [3],\r\n      },\r\n      {\r\n        word: \"rauchen\",\r\n        allowed: [4],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    words: [\r\n      {\r\n        word: \"Frau Müller\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"macht\",\r\n        allowed: [1],\r\n      },\r\n      {\r\n        word: \"die Bäckerei\",\r\n        allowed: [3, 2],\r\n      },\r\n      {\r\n        word: \"um 18 Uhr\",\r\n        allowed: [0, 2],\r\n      },\r\n      {\r\n        word: \"zu\",\r\n        allowed: [4],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nfor (let i = 0; i < sentenceList.length; i++) {\r\n  shuffleArray(sentenceList[i].words);\r\n}\r\n\r\nconst topPos = [573, 494, 415, 336, 257];\r\n\r\nconst Part2Game5 = ({ setHelpFingerPosition, helpOverlay }) => {\r\n  const [level, setLevel] = useState(0);\r\n  const [availablePos, setAvailablePos] = useState([\r\n    true,\r\n    true,\r\n    true,\r\n    true,\r\n    true,\r\n  ]);\r\n  const dropRef = useRef();\r\n\r\n  const [indicator, setIndicator] = useState({\r\n    active: false,\r\n    wrong: false,\r\n  });\r\n\r\n  const positionCircles = () => {\r\n    const options = Array.from(\r\n      document.querySelectorAll(\".option\")[level].children\r\n    );\r\n\r\n    let width = options[0].getBoundingClientRect().width * options.length;\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      options[i].style.transition = \"200ms\";\r\n\r\n      setTimeout(() => {\r\n        options[i].style.transition = \"0ms\";\r\n      }, 200);\r\n\r\n      options[i].style.left =\r\n        dropRef.current.getBoundingClientRect().left +\r\n        dropRef.current.getBoundingClientRect().width / 2 -\r\n        width / 2 +\r\n        70 * i +\r\n        \"px\";\r\n    }\r\n  };\r\n\r\n  let animateCircleShow = (level) => {\r\n    const options = Array.from(\r\n      document.querySelectorAll(\".option\")[level].children\r\n    );\r\n\r\n    let width = options[0].getBoundingClientRect().width * options.length;\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      options[i].style.transition = \"200ms\";\r\n\r\n      options[i].style.left =\r\n        dropRef.current.getBoundingClientRect().left +\r\n        dropRef.current.getBoundingClientRect().width / 2 -\r\n        width / 2 +\r\n        \"px\";\r\n\r\n      setTimeout(() => {\r\n        options[i].style.left =\r\n          dropRef.current.getBoundingClientRect().left +\r\n          dropRef.current.getBoundingClientRect().width / 2 -\r\n          width / 2 +\r\n          70 * i +\r\n          \"px\";\r\n\r\n        setTimeout(() => {\r\n          options[i].style.transition = \"0ms\";\r\n        }, 200);\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    animateCircleShow(level);\r\n  }, []);\r\n\r\n  const moveToDropPosition = (element, leftPosIndex, leftPos) => {\r\n    let cloneElement = element.cloneNode(true);\r\n    cloneElement.style.left = element.getBoundingClientRect().left + \"px\";\r\n    cloneElement.style.top = element.getBoundingClientRect().top + \"px\";\r\n    cloneElement.style.zIndex = -1;\r\n\r\n    if (+leftPosIndex === 0) {\r\n      cloneElement.style.textTransform = \"capitalize\";\r\n    } else if (+leftPosIndex === 1 || +leftPosIndex === 4) {\r\n      cloneElement.style.backgroundColor = \"#5ac8f5\";\r\n    }\r\n\r\n    document.querySelector(\".clone-circle\").appendChild(cloneElement);\r\n\r\n    setTimeout(() => {\r\n      cloneElement.style.transition = \"200ms\";\r\n      cloneElement.style.left = leftPos[leftPosIndex] + \"px\";\r\n\r\n      setTimeout(() => {\r\n        cloneElement.style.transition = \"500ms\";\r\n        cloneElement.style.top = topPos[level] + \"px\";\r\n      }, 300);\r\n    }, 100);\r\n\r\n    element.remove();\r\n  };\r\n\r\n  const handleMove = (initEvent) => {\r\n    let initTop = initEvent.target.getBoundingClientRect().top;\r\n    let newAvailablePos = [...availablePos];\r\n\r\n    const moveCircle = (moveEvent) => {\r\n      if (\r\n        moveEvent.clientY +\r\n          initEvent.target.getBoundingClientRect().height / 2 +\r\n          10 <\r\n        dropRef.current.getBoundingClientRect().top\r\n      ) {\r\n        initEvent.target.style.top =\r\n          moveEvent.clientY -\r\n          initTop -\r\n          initEvent.target.getBoundingClientRect().height / 2 +\r\n          \"px\";\r\n      }\r\n\r\n      initEvent.target.style.left =\r\n        moveEvent.clientX -\r\n        initEvent.target.getBoundingClientRect().width / 2 +\r\n        \"px\";\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", moveCircle);\r\n\r\n    const endMoveCircle = (endEvent) => {\r\n      document.removeEventListener(\"mousemove\", moveCircle);\r\n      document.removeEventListener(\"mouseup\", endMoveCircle);\r\n\r\n      let leftPos = [358.5, 436.5, 515.5, 594.5, 673];\r\n\r\n      let returnToInitPos = true;\r\n\r\n      let leftPosIndex;\r\n\r\n      let allowed = initEvent.target.getAttribute(\"allowed\").split(\",\");\r\n\r\n      for (let j = 0; j < allowed.length; j++) {\r\n        if (\r\n          availablePos[allowed[j]] &&\r\n          endEvent.clientX > leftPos[allowed[j]] &&\r\n          endEvent.clientX <\r\n            leftPos[allowed[j]] +\r\n              initEvent.target.getBoundingClientRect().width &&\r\n          endEvent.clientY > dropRef.current.getBoundingClientRect().top - 60\r\n        ) {\r\n          leftPosIndex = allowed[j];\r\n\r\n          returnToInitPos = false;\r\n\r\n          newAvailablePos[allowed[j]] = false;\r\n\r\n          setAvailablePos(newAvailablePos);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (returnToInitPos) {\r\n        initEvent.target.style.transition = \"200ms\";\r\n        initEvent.target.style.top = 0 + \"px\";\r\n\r\n        setIndicator({ active: true, wrong: true });\r\n\r\n        setTimeout(() => {\r\n          setIndicator({ active: false, wrong: false });\r\n        }, 1000);\r\n\r\n        setTimeout(() => {\r\n          initEvent.target.style.transition = \"200ms\";\r\n        }, 200);\r\n      } else {\r\n        let element = initEvent.target;\r\n\r\n        setIndicator({ active: true, wrong: false });\r\n\r\n        setTimeout(() => {\r\n          setIndicator({ active: false, wrong: false });\r\n        }, 1000);\r\n\r\n        moveToDropPosition(element, leftPosIndex, leftPos);\r\n      }\r\n\r\n      let isDone = true;\r\n\r\n      for (let i = 0; i < newAvailablePos.length; i++) {\r\n        if (newAvailablePos[i]) {\r\n          isDone = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (isDone) {\r\n        setAvailablePos([true, true, true, true, true]);\r\n\r\n        setTimeout(() => {\r\n          let newLevel;\r\n          setLevel((prev) => {\r\n            newLevel = prev + 1;\r\n            return prev + 1;\r\n          });\r\n\r\n          if (newLevel < 5) animateCircleShow(newLevel);\r\n          else setPreventHelp(true);\r\n        }, 500);\r\n      } else {\r\n        positionCircles();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", endMoveCircle);\r\n  };\r\n\r\n  const [preventHelp, setPreventHelp] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let optionList = Array.from(document.querySelectorAll(\".option\"));\r\n    if (preventHelp) {\r\n      setHelpFingerPosition(\"init\");\r\n      setTimeout(() => {\r\n        setHelpFingerPosition(false);\r\n      }, 10);\r\n      return;\r\n    }\r\n\r\n    if (helpOverlay) {\r\n      setPreventHelp(true);\r\n      let element = optionList[level].children[0];\r\n\r\n      if (!element) return;\r\n\r\n      element.style.transition = \"1000ms linear\";\r\n\r\n      let initTop = element.getBoundingClientRect().top;\r\n      element.style.top = \"0px\";\r\n\r\n      setHelpFingerPosition([\r\n        element.getBoundingClientRect().left +\r\n          element.getBoundingClientRect().width / 2,\r\n        element.getBoundingClientRect().top +\r\n          element.getBoundingClientRect().height / 2,\r\n      ]);\r\n\r\n      let leftPos = [358.5, 436.5, 515.5, 594.5, 673];\r\n      let allowed = element.getAttribute(\"allowed\").split(\",\");\r\n      let leftPosIndex = allowed[0];\r\n      let newAvailablePos = [...availablePos];\r\n\r\n      for (let j = 0; j < allowed.length; j++) {\r\n        if (availablePos[allowed[j]]) {\r\n          leftPosIndex = allowed[j];\r\n\r\n          newAvailablePos[allowed[j]] = false;\r\n\r\n          setAvailablePos(newAvailablePos);\r\n          break;\r\n        }\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setHelpFingerPosition([\r\n          leftPos[leftPosIndex] + 35,\r\n          dropRef.current.getBoundingClientRect().top - 45,\r\n        ]);\r\n\r\n        element.style.left = leftPos[leftPosIndex] + \"px\";\r\n        element.style.top =\r\n          dropRef.current.getBoundingClientRect().top - 80 - initTop + \"px\";\r\n\r\n        setIndicator({ active: true, wrong: false });\r\n\r\n        setTimeout(() => {\r\n          moveToDropPosition(element, leftPosIndex, leftPos);\r\n\r\n          setTimeout(() => {\r\n            setHelpFingerPosition(\"init\");\r\n            setHelpFingerPosition(false);\r\n            setIndicator({ active: false, wrong: false });\r\n\r\n            let isDone = true;\r\n\r\n            for (let i = 0; i < newAvailablePos.length; i++) {\r\n              if (newAvailablePos[i]) {\r\n                isDone = false;\r\n                break;\r\n              }\r\n            }\r\n\r\n            if (isDone) {\r\n              setAvailablePos([true, true, true, true, true]);\r\n\r\n              setTimeout(() => {\r\n                let newLevel;\r\n                setLevel((prev) => {\r\n                  newLevel = prev + 1;\r\n                  return prev + 1;\r\n                });\r\n\r\n                if (newLevel < 5) {\r\n                  animateCircleShow(newLevel);\r\n                  setTimeout(() => {\r\n                    setPreventHelp(false);\r\n                  }, 500);\r\n                }\r\n              }, 500);\r\n            } else {\r\n              positionCircles();\r\n              setTimeout(() => {\r\n                setPreventHelp(false);\r\n              }, 500);\r\n            }\r\n          }, 1500);\r\n        }, 1000);\r\n      }, 1250);\r\n    } else {\r\n      setHelpFingerPosition(\"init\");\r\n      setTimeout(() => {\r\n        setHelpFingerPosition(false);\r\n      }, 250);\r\n    }\r\n  }, [helpOverlay]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"part2\">\r\n        {sentenceList.map((option, optionIndex) => (\r\n          <div\r\n            key={optionIndex}\r\n            className=\"option\"\r\n            style={{\r\n              opacity: optionIndex <= level ? 1 : 0,\r\n              pointerEvents: optionIndex === level ? \"inherit\" : \"none\",\r\n              transition: \"500ms\",\r\n            }}\r\n          >\r\n            {option.words.map((option, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"circle\"\r\n                correctid={option.correctID}\r\n                onMouseDown={handleMove}\r\n                allowed={option.allowed}\r\n                style={{\r\n                  opacity:\r\n                    optionIndex !== level && option.correctID === undefined\r\n                      ? \"0\"\r\n                      : \"1\",\r\n                }}\r\n              >\r\n                {option.word}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n        <div className=\"drop-zone\">\r\n          <img src={DropZone} ref={dropRef} alt=\"\" />\r\n        </div>\r\n        <div className=\"clone-circle\"></div>\r\n      </div>\r\n      <Indicator active={indicator.active} wrong={indicator.wrong} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Part2Game5;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../css/game5.css\";\r\nimport DropZone from \"../assets/img/SVG/subtract.svg\";\r\nimport Arrow from \"../assets/img/SVG/arrow.svg\";\r\nimport Indicator from \"../UI/Indicator\";\r\nimport Part2Game5 from \"./Part2Game5\";\r\nimport StatusBar from \"../UI/StatusBar\";\r\n\r\nconst lineList = [\r\n  {\r\n    top: 566,\r\n    words: [\"Man\", \"die Regel\", \"vifleißigel\"],\r\n    diagonalID: 0,\r\n  },\r\n  {\r\n    top: 487.5,\r\n    words: [\"In Sätzen\", \"ich\", \"die Satz- klammer\"],\r\n    diagonalID: 2,\r\n  },\r\n  {\r\n    top: 408.5,\r\n    words: [\"In Sätzen\", \"hier\", \"blaue Jetons\"],\r\n    diagonalID: 1,\r\n  },\r\n  {\r\n    top: 330,\r\n    words: [\"Ich\", \"in der Übung\", \"viel\"],\r\n    diagonalID: 2,\r\n  },\r\n  {\r\n    top: 251.5,\r\n    words: [\"Ich\", \"im Unter- richt\", \"Gram- matik\"],\r\n    diagonalID: 0,\r\n  },\r\n];\r\n\r\nconst leftPos = [358.5, 515.5, 594.5];\r\n\r\nconst verbPos = [436.5, 673];\r\n\r\nconst optionList = [\r\n  [\r\n    { word: \"hat\", correctID: 0 },\r\n    { word: \"gelernt\", correctID: 1, diagonal: true },\r\n  ],\r\n  [\r\n    { word: \"finden\", correctID: 1 },\r\n    { word: \"kann\", correctID: 0, diagonal: true },\r\n    { word: \"klickt\" },\r\n    { word: \"an\" },\r\n  ],\r\n  [\r\n    { word: \"möchte\" },\r\n    { word: \"klickt\", correctID: 0 },\r\n    { word: \"erfahren\" },\r\n    { word: \"üben\" },\r\n    { word: \"habe\" },\r\n    { word: \"an\", correctID: 1 },\r\n  ],\r\n  [\r\n    { word: \"möchte\" },\r\n    { word: \"erfahren\", correctID: 1 },\r\n    { word: \"üben\" },\r\n    { word: \"habe\", correctID: 0, diagonal: true },\r\n  ],\r\n  [\r\n    { word: \"möchte\", correctID: 0 },\r\n    { word: \"üben\", correctID: 1, diagonal: true },\r\n  ],\r\n];\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nfor (let i = 0; i < optionList.length; i++) {\r\n  shuffleArray(optionList[i]);\r\n}\r\n\r\nconst Game5 = () => {\r\n  const [level, setLevel] = useState(0);\r\n  const dropRef = useRef(null);\r\n  const arrowRefs = [useRef(null), useRef(null)];\r\n  const [indicator, setIndicator] = useState({\r\n    active: false,\r\n    wrong: false,\r\n  });\r\n  const [verbOnPosition, setVerbOnPosition] = useState(0);\r\n  const [preventMove, setPreventMove] = useState(false);\r\n\r\n  const positionCircles = (level) => {\r\n    const options = Array.from(\r\n      document.querySelectorAll(\".option\")[level].children\r\n    );\r\n\r\n    if (options.length === 0) return;\r\n\r\n    let width = options[0].getBoundingClientRect().width * options.length;\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      options[i].style.transition = \"200ms\";\r\n\r\n      setTimeout(() => {\r\n        options[i].style.transition = \"0ms\";\r\n      }, 200);\r\n\r\n      options[i].style.left =\r\n        dropRef.current.getBoundingClientRect().left +\r\n        dropRef.current.getBoundingClientRect().width / 2 -\r\n        width / 2 +\r\n        70 * i +\r\n        \"px\";\r\n    }\r\n  };\r\n\r\n  let animateCircleShow = (level) => {\r\n    const options = Array.from(\r\n      document.querySelectorAll(\".option\")[level].children\r\n    );\r\n\r\n    let width = options[0].getBoundingClientRect().width * options.length;\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      options[i].style.transition = \"200ms\";\r\n\r\n      options[i].style.left =\r\n        dropRef.current.getBoundingClientRect().left +\r\n        dropRef.current.getBoundingClientRect().width / 2 -\r\n        35 +\r\n        \"px\";\r\n\r\n      setTimeout(() => {\r\n        options[i].style.left =\r\n          dropRef.current.getBoundingClientRect().left +\r\n          dropRef.current.getBoundingClientRect().width / 2 -\r\n          width / 2 +\r\n          70 * i +\r\n          \"px\";\r\n\r\n        setTimeout(() => {\r\n          options[i].style.transition = \"0ms\";\r\n        }, 200);\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (level === 0) animateCircleShow(level);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (level === 5) {\r\n      dropRef.current.style.top = \"-100px\";\r\n      setInfoText(\"Finde zwei neue Sätze. Tipp: Lies diagonal.\");\r\n      setInfoOverlay(true);\r\n\r\n      let cloneList = Array.from(\r\n        document.querySelectorAll(\".clone-circle\")[0].children\r\n      );\r\n\r\n      for (let i = 0; i < cloneList.length; i++) {\r\n        cloneList[i].style.transition = \"1000ms linear\";\r\n        cloneList[i].style.top =\r\n          parseFloat(cloneList[i].style.top) - 100 + \"px\";\r\n      }\r\n\r\n      for (let j = 0; j < optionList.length; j++) {\r\n        const options = Array.from(\r\n          document.querySelectorAll(\".option\")[j].children\r\n        );\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n          options[i].style.transition = \"1000ms linear\";\r\n\r\n          options[i].style.top = parseFloat(options[i].style.top) - 100 + \"px\";\r\n        }\r\n      }\r\n    }\r\n  }, [level]);\r\n\r\n  const moveToDropPosition = (element, arrowID) => {\r\n    if (verbOnPosition === 1) setPreventMove(true);\r\n\r\n    let cloneElement = element.cloneNode(true);\r\n    cloneElement.style.left = element.getBoundingClientRect().left + \"px\";\r\n    cloneElement.style.top = element.getBoundingClientRect().top + \"px\";\r\n    cloneElement.style.zIndex = -1;\r\n\r\n    element.remove();\r\n\r\n    positionCircles(level);\r\n\r\n    document.querySelector(\".clone-circle\").appendChild(cloneElement);\r\n\r\n    setTimeout(() => {\r\n      cloneElement.style.transition = \"200ms\";\r\n      cloneElement.style.zIndex = \"-1\";\r\n      cloneElement.style.left = verbPos[arrowID] + \"px\";\r\n    }, 100);\r\n\r\n    setIndicator({ active: true, wrong: false });\r\n\r\n    setTimeout(() => {\r\n      cloneElement.style.transition = \"1000ms\";\r\n      cloneElement.style.top = lineList[level].top + \"px\";\r\n\r\n      let currentVerbOnPosition;\r\n      setVerbOnPosition((prev) => {\r\n        currentVerbOnPosition = prev + 1;\r\n        return prev + 1;\r\n      });\r\n\r\n      if (currentVerbOnPosition === 2) {\r\n        setTimeout(() => {\r\n          setVerbOnPosition(0);\r\n\r\n          setTimeout(() => {\r\n            if (level === 4) {\r\n              setTimeout(() => {\r\n                setLevel(5);\r\n              }, 1000);\r\n            }\r\n\r\n            if (level + 1 === 1) {\r\n              setLevel((prev) => prev + 1);\r\n              animateCircleShow(level + 1);\r\n            } else {\r\n              if (level + 1 < 5) {\r\n                const options = Array.from(\r\n                  document.querySelectorAll(\".option\")[level].children\r\n                );\r\n\r\n                for (let i = 0; i < options.length; i++) {\r\n                  options[i].style.transition = \"200ms\";\r\n\r\n                  options[i].style.left =\r\n                    dropRef.current.getBoundingClientRect().left +\r\n                    dropRef.current.getBoundingClientRect().width / 2 -\r\n                    35 +\r\n                    \"px\";\r\n                }\r\n\r\n                setTimeout(() => {\r\n                  setLevel((prev) => prev + 1);\r\n                  animateCircleShow(level + 1);\r\n                }, 100);\r\n              }\r\n            }\r\n            setPreventMove(false);\r\n\r\n            setTimeout(() => {\r\n              setPreventHelp(false);\r\n            }, 1000);\r\n          }, 100);\r\n        }, 100);\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  const handleMove = (initEvent) => {\r\n    if (preventMove) return;\r\n\r\n    initEvent.target.style.zIndex = \"1000\";\r\n\r\n    let initTop = initEvent.target.getBoundingClientRect().top;\r\n\r\n    const moveElement = (moveEvent) => {\r\n      if (\r\n        moveEvent.clientY +\r\n          initEvent.target.getBoundingClientRect().height / 2 +\r\n          10 <\r\n        dropRef.current.getBoundingClientRect().top\r\n      ) {\r\n        initEvent.target.style.top =\r\n          moveEvent.clientY -\r\n          initTop -\r\n          initEvent.target.getBoundingClientRect().height / 2 +\r\n          \"px\";\r\n      }\r\n\r\n      initEvent.target.style.left =\r\n        moveEvent.clientX -\r\n        initEvent.target.getBoundingClientRect().width / 2 +\r\n        \"px\";\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", moveElement);\r\n\r\n    const stopMoveElement = (endEvent) => {\r\n      document.removeEventListener(\"mousemove\", moveElement);\r\n      document.removeEventListener(\"mouseup\", stopMoveElement);\r\n\r\n      let arrowID = initEvent.target.getAttribute(\"correctid\");\r\n\r\n      if (\r\n        arrowID !== null &&\r\n        endEvent.clientX >\r\n          arrowRefs[arrowID].current.getBoundingClientRect().left &&\r\n        endEvent.clientX <\r\n          arrowRefs[arrowID].current.getBoundingClientRect().right &&\r\n        endEvent.clientY >=\r\n          arrowRefs[arrowID].current.getBoundingClientRect().top\r\n      ) {\r\n        setPreventHelp(true);\r\n\r\n        moveToDropPosition(initEvent.target, arrowID);\r\n      } else {\r\n        initEvent.target.style.transition = \"200ms\";\r\n        initEvent.target.style.top = \"0px\";\r\n\r\n        positionCircles(level);\r\n\r\n        setIndicator({ active: true, wrong: true });\r\n\r\n        setTimeout(() => {\r\n          initEvent.target.style.transition = \"0ms\";\r\n        }, 200);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setIndicator({ active: false, wrong: false });\r\n      }, 1000);\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", stopMoveElement);\r\n  };\r\n\r\n  const [diagonalSolution, setDiagonalSolution] = useState(false);\r\n\r\n  const showDiagonalSolution = () => {\r\n    setDiagonalSolution(true);\r\n\r\n    let diagonalCircle = Array.from(document.querySelectorAll(\".diagonal\"));\r\n\r\n    console.log(diagonalCircle);\r\n\r\n    for (let i = 0; i < diagonalCircle.length; i++) {\r\n      diagonalCircle[i].style.backgroundColor = \"#EB6400\";\r\n    }\r\n  };\r\n\r\n  const [part2, setPart2] = useState(false);\r\n  const [infoText, setInfoText] = useState(\r\n    <p>\r\n      Bilde Sätze. Leg die Jetons mit Satzklammer an die <br /> richtige\r\n      Position.\r\n    </p>\r\n  );\r\n  const [infoOverlay, setInfoOverlay] = useState(true);\r\n  const [helpOverlay, setHelpOverlay] = useState(false);\r\n  const [helpFingerPosition, setHelpFingerPosition] = useState([]);\r\n  const [preventHelp, setPreventHelp] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (part2) return;\r\n\r\n    let optionList = Array.from(document.querySelectorAll(\".option\"));\r\n    if (preventHelp) {\r\n      setHelpFingerPosition(\"init\");\r\n      setTimeout(() => {\r\n        setHelpFingerPosition(false);\r\n      }, 10);\r\n      return;\r\n    }\r\n\r\n    if (helpOverlay) {\r\n      setPreventHelp(true);\r\n      let element;\r\n      let arrowID;\r\n\r\n      for (let i = 0; i < optionList[level].children.length; i++) {\r\n        arrowID = optionList[level].children[i]?.getAttribute(\"correctid\");\r\n\r\n        if (arrowID !== null) {\r\n          element = optionList[level].children[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      arrowID = +arrowID;\r\n\r\n      if (!element) return;\r\n\r\n      element.style.transition = \"1000ms linear\";\r\n\r\n      let initTop = element.getBoundingClientRect().top;\r\n      element.style.top = \"0px\";\r\n\r\n      setHelpFingerPosition([\r\n        element.getBoundingClientRect().left +\r\n          element.getBoundingClientRect().width / 2,\r\n        element.getBoundingClientRect().top +\r\n          element.getBoundingClientRect().height / 2,\r\n      ]);\r\n\r\n      setTimeout(() => {\r\n        setHelpFingerPosition([\r\n          arrowRefs[arrowID].current.getBoundingClientRect().left +\r\n            arrowRefs[arrowID].current.getBoundingClientRect().width / 2,\r\n          arrowRefs[arrowID].current.getBoundingClientRect().top +\r\n            arrowRefs[arrowID].current.getBoundingClientRect().height / 2,\r\n        ]);\r\n\r\n        element.style.left = verbPos[arrowID] + \"px\";\r\n        element.style.top =\r\n          arrowRefs[arrowID].current.getBoundingClientRect().top -\r\n          arrowRefs[arrowID].current.getBoundingClientRect().height / 2 -\r\n          initTop +\r\n          \"px\";\r\n\r\n        setIndicator({ active: true, wrong: false });\r\n\r\n        setTimeout(() => {\r\n          moveToDropPosition(element, arrowID);\r\n\r\n          setIndicator({ active: false, wrong: false });\r\n\r\n          setTimeout(() => {\r\n            setHelpFingerPosition(\"init\");\r\n            setHelpFingerPosition(false);\r\n            setPreventHelp(false);\r\n          }, 1500);\r\n        }, 1000);\r\n      }, 1250);\r\n    } else {\r\n      setHelpFingerPosition(\"init\");\r\n      setTimeout(() => {\r\n        setHelpFingerPosition(false);\r\n      }, 250);\r\n    }\r\n  }, [helpOverlay]);\r\n\r\n  return (\r\n    <>\r\n      {!part2 && (\r\n        <div\r\n          className=\"game5\"\r\n          style={{\r\n            transition: \"500ms\",\r\n            opacity: level === 6 ? 0 : 1,\r\n          }}\r\n        >\r\n          {optionList.map((option, optionIndex) => (\r\n            <div\r\n              className=\"option\"\r\n              style={{\r\n                opacity: optionIndex <= level ? 1 : 0,\r\n                pointerEvents: optionIndex === level ? \"inherit\" : \"none\",\r\n                transition: optionIndex < 2 ? \"500ms\" : \"0ms\",\r\n              }}\r\n            >\r\n              {option.map((option) => (\r\n                <div\r\n                  className={`circle ${option.diagonal ? \"diagonal\" : \"\"}`}\r\n                  correctid={option.correctID}\r\n                  onMouseDown={handleMove}\r\n                  style={{\r\n                    opacity:\r\n                      optionIndex !== level && option.correctID === undefined\r\n                        ? \"0\"\r\n                        : \"1\",\r\n                  }}\r\n                >\r\n                  {option.word}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n          {\r\n            <div\r\n              className=\"arrows\"\r\n              style={{ visibility: level < 5 ? \"\" : \"hidden\" }}\r\n            >\r\n              <img src={Arrow} ref={arrowRefs[0]} alt=\"\" />\r\n              <img src={Arrow} ref={arrowRefs[1]} alt=\"\" />\r\n            </div>\r\n          }\r\n          <div className=\"clone-circle\"></div>\r\n          <div className=\"circles\">\r\n            {lineList.map((line, lineIndex) => (\r\n              <div className=\"line\">\r\n                {line.words.map((word, wordIndex) => (\r\n                  <div\r\n                    className=\"circle\"\r\n                    style={{\r\n                      top:\r\n                        level >= 5\r\n                          ? line.top - 100\r\n                          : lineIndex <= level\r\n                          ? line.top\r\n                          : 160,\r\n                      left: leftPos[wordIndex],\r\n                      opacity: lineIndex <= level ? 1 : 0,\r\n                      transitionDuration: level >= 5 ? \"1000ms\" : \"500ms\",\r\n                      backgroundColor:\r\n                        diagonalSolution && wordIndex === line.diagonalID\r\n                          ? \"#EB6400\"\r\n                          : \"#788287\",\r\n                    }}\r\n                  >\r\n                    {word}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"drop-zone\">\r\n            <img src={DropZone} ref={dropRef} alt=\"\" />\r\n          </div>\r\n\r\n          {level >= 5 && !diagonalSolution && !part2 && (\r\n            <div className=\"button\" onClick={showDiagonalSolution}>\r\n              Lösung zeigen\r\n            </div>\r\n          )}\r\n          {diagonalSolution && (\r\n            <div\r\n              className=\"button\"\r\n              onClick={() => {\r\n                setLevel(6);\r\n                setTimeout(() => {\r\n                  setPart2(true);\r\n                  setInfoText(\r\n                    <p>\r\n                      Bilde Sätze. Leg die Jetons an die richtigen Positionen.\r\n                    </p>\r\n                  );\r\n                  setInfoOverlay(true);\r\n                }, 500);\r\n              }}\r\n            >\r\n              Weiter Üben\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div className=\"game5\">\r\n        {part2 && (\r\n          <Part2Game5\r\n            helpOverlay={helpOverlay}\r\n            setHelpFingerPosition={setHelpFingerPosition}\r\n          />\r\n        )}\r\n      </div>\r\n      <Indicator active={indicator.active} wrong={indicator.wrong} />\r\n      <StatusBar\r\n        infoText={infoText}\r\n        infoOverlay={infoOverlay}\r\n        setInfoOverlay={setInfoOverlay}\r\n        setHelpOverlay={setHelpOverlay}\r\n        helpFingerPosition={helpFingerPosition}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game5;\r\n","import React, { useEffect, createRef, useRef, useState } from \"react\";\r\nimport \"./css/general.css\";\r\nimport Menu from \"./menu/menu\";\r\nimport Game1 from \"./game1/Game1\";\r\nimport Game2 from \"./game2/Game2\";\r\nimport Game3 from \"./game3/Game3\";\r\nimport Game4 from \"./game4/Game4\";\r\nimport Game5 from \"./game5/Game5\";\r\n\r\nfunction App() {\r\n  const [navMenuItem, setNavMenuItem] = useState(0);\r\n  const [load, setLoad] = useState(false);\r\n  const menuRef = useRef(null);\r\n\r\n  const navButtonRef = [];\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    navButtonRef[i] = createRef();\r\n  }\r\n\r\n  setTimeout(() => {\r\n    setLoad(true);\r\n  }, 1000);\r\n\r\n  useEffect(() => {\r\n    document\r\n      .querySelector('meta[name=\"viewport\"]')\r\n      .setAttribute(\"content\", \"width=1200\", \"initial-scale=1\");\r\n\r\n    document.firstElementChild.style.zoom = 1;\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Menu\r\n        navMenuItem={navMenuItem}\r\n        setNavMenuItem={setNavMenuItem}\r\n        navButtonRef={navButtonRef}\r\n        menuRef={menuRef}\r\n      /> */}\r\n\r\n      {/* {navMenuItem === 0 && <Game1 />}\r\n      {navMenuItem === 1 && <Game2 />}\r\n      {navMenuItem === 2 && <Game3 />}\r\n      {navMenuItem === 3 && <Game4 />}\r\n      {navMenuItem === 4 && <Game5 />} */}\r\n\r\n      <Game1 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}